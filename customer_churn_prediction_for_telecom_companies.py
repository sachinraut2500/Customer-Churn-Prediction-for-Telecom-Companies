# -*- coding: utf-8 -*-
"""Customer Churn Prediction for Telecom Companies.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKYgrwW1BbCxeOcU-7lO2w31ebT7-_yO
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report, confusion_matrix

def load_data():
    # Public telecom churn dataset: https://www.kaggle.com/blastchar/telco-customer-churn
    df = pd.read_csv('telco_customer_churn.csv')
    return df

def preprocess(df):
    # Drop customerID column
    df = df.drop('customerID', axis=1)

    # Encode categorical columns
    for col in df.select_dtypes(include=['object']).columns:
        if col != 'Churn':
            df[col] = LabelEncoder().fit_transform(df[col])

    # Convert target variable to binary
    df['Churn'] = df['Churn'].map({'Yes':1, 'No':0})

    # Fill missing values in 'TotalCharges' (if any) and convert to float
    df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
    df['TotalCharges'] = df['TotalCharges'].fillna(df['TotalCharges'].median())

    # Features and target
    X = df.drop('Churn', axis=1)
    y = df['Churn']

    # Scale features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    return train_test_split(X_scaled, y, test_size=0.3, random_state=42)

def train_model(X_train, y_train):
    model = GradientBoostingClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

def main():
    print("Loading data...")
    df = load_data()
    print("Preprocessing data...")
    X_train, X_test, y_train, y_test = preprocess(df)
    print("Training model...")
    model = train_model(X_train, y_train)
    print("Evaluating model...")
    evaluate_model(model, X_test, y_test)

if __name__ == "__main__":
    main()